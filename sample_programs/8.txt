func void merge(int arr[] , int l, int m, int r) 
begin 
    int i
    int j
    int k 
    int n1
    n1 = m - l + 1 
    int n2
    n2 =  r - m 
  
    int L[100]
    int R[100] 
  
    for i = 0, i < n1, 1
    begin
        L[i] = arr[l + i]
    end

    for j = 0, j < n2, 1
    begin
        R[j] = arr[m + 1+ j]
    end

    i = 0
    j = 0
    k = l
    while (i < n1 and j < n2) 
    begin 
        if L[i] <= R[j] then
        begin 
            arr[k] = L[i] 
            i=i+1
        end 
        else
        begin 
            arr[k] = R[j] 
            j=j+1
        end 
        k=k+1
    end 
  

    while (i < n1) 
    begin 
        arr[k] = L[i] 
        i=i+1
        k=k+1
    end 
  

    while (j < n2) 
    begin 
        arr[k] = R[j] 
        j=j+1
        k=k+1
    end 
end 
  

func void mergeSort(int arr, int l, int r) 
begin 
    if l < r then
    begin 
        
        int m
        m = l+(r - l)/2 
  
        mergeSort(arr, l, m) 
        mergeSort(arr, m+1, r) 
  
        merge(arr, l, m, r) 
    end 
end 

func int main() 
begin 
    int arr[6]
    int arr_size
    arr_size = 6
    int i
    for i=0, i< arr_size, 1
    begin
       arr[i] = 8 - i
    end

    mergeSort(arr, 0, arr_size - 1) 
  
    print("%d",arr[0]) 
    return 0 
end 
